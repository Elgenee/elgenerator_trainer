#!/usr/bin/env node

var fs           = require('fs');
var mkdirp       = require('mkdirp');
var os           = require('os');
var path         = require('path');
var program      = require('commander');
var readline     = require('readline');
var sortedObject = require('sorted-object');
var util         = require('util');

var _exit = process.exit;
var eol = os.EOL;
var pkg = require('../package.json');

var version = pkg.version;

// Re-assign process.exit because of commander
// TODO: Switch to a different command framework
process.exit = exit

// CLI

around(program, 'optionMissingArgument', function (fn, args) {
  program.outputHelp()
  fn.apply(this, args)
  return { args: [], unknown: [] }
})

before(program, 'outputHelp', function () {
  // track if help was shown for unknown option
  this._helpShown = true
});

before(program, 'unknownOption', function () {
  // allow unknown options if help was shown, to prevent trailing error
  this._allowUnknownOption = this._helpShown

  // show help if not yet shown
  if (!this._helpShown) {
    program.outputHelp()
  }
})

program
  .version(version, '    --version')
  .usage('[options] [dir]')
  .option('-c, --css <engine>', 'add stylesheet <engine> support (less|stylus|compass|sass) (defaults to plain css)')
  .option('-f, --force', 'force on non-empty directory')
  .parse(process.argv);

if (!exit.exited) {
  main();
}

/**
 * Install an around function; AOP.
 */

function around(obj, method, fn) {
  var old = obj[method]

  obj[method] = function () {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) args[i] = arguments[i]
    return fn.call(this, old, args)
  }
}

/**
 * Install a before function; AOP.
 */

function before(obj, method, fn) {
  var old = obj[method];

  obj[method] = function () {
    fn.call(this);
    old.apply(this, arguments);
  };
}

/**
 * Prompt for confirmation on STDOUT/STDIN
 */

function confirm(msg, callback) {
  var rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
  });

  rl.question(msg, function (input) {
    rl.close();
    callback(/^y|yes|ok|true$/i.test(input));
  });
}

/**
 * Create application at the given directory `path`.
 *
 * @param {String} path
 */

function createApplication(app_name, path) {
  var wait = 5;

  console.log();
  function complete() {
    if (--wait) return;

    console.log();
    console.log('   Install dependencies:');
    console.log('   $ cd %s && npm install', path);
    console.log();
    console.log('   Start your app:');
    console.log('    $ npm start');
    console.log();
  }

  mkdir(path, function(){
    mkdir(`${path}/public`);
    write(`${path}/public/images`, loadTemplate(`${path}/public/images/favicon.ico`));

    mkdir(`${path}/public/javascripts`);
    write(`${path}/public/javascripts/script.js`, loadTemplate('javascripts/script.js'));

    mkdir(`${path}/public/stylesheets`, () => {
      switch (program.css) {
        case 'plain': write(`${path}/public/stylesheets/style.css`,  loadTemplate('css/style.css'));   break;
        case 'less':  write(`${path}/public/stylesheets/style.less`, loadTemplate('css/style.less'));  break;
        case 'sass':  write(`${path}/public/stylesheets/style.sass`, loadTemplate('css/style.sass'));  break;
        case 'scss':  write(`${path}/public/stylesheets/style.scss`, loadTemplate('css/style.scss'));  break;
        default:      write(`${path}/public/stylesheets/style.scss`, loadTemplate('css/style.scss')); }
      complete();
    });

    mkdir(`${path}/routes`, () => {
      write(`${path}/routes/index.js`, loadTemplate('js/routes/index.js'));
      complete();
    });

    mkdir(`${path}/views`, () => {
      copy_template('hbs/index.hbs',  `${path}/views/index.hbs`);
      copy_template('hbs/layout.hbs', `${path}/views/layout.hbs`);
      copy_template('hbs/error.hbs',  `${path}/views/error.hbs`);
      complete();
    });

    mkdir(`${path}/models`);

    // CSS Engine support
    switch (program.css) {
      case 'plain':
        app = app.replace('{css}', '');
        break;
      case 'less':
        app = app.replace('{css}', "app.use(require('less-middleware')(path.join(__dirname, 'public')));");
        break;
      case 'scss':
        app = app.replace('{css}', "app.use(require('node-compass')({mode: 'expanded'}));");
        break;
      case 'sass':
        app = app.replace('{css}', `
          app.use(require('node-sass-middleware')({
            src: path.join(__dirname, 'public'),
            dest: path.join(__dirname, 'public'),
            indentedSyntax: true,
            sourceMap: true
          }));`);
        break;
      default:
        app = app.replace('{css}', "app.use(require('node-compass')({mode: 'expanded'}));");
    }

    // Template support
    // Database Engine support
    app = app.replace('{dbconnect}', `mongoose.connect(\'mongodb://localhost/${app_name}\');`);

    // package.json
    var pkg = {
        name: app_name
      , version: '0.0.0'
      , private: true
      , scripts: { start: 'nodemon app.js' }
      , dependencies: {
          'body-parser':   '~1.18.2',
          'cookie-parser': '~1.4.3',
          'express':       '~4.16.0',
          'hbs':           '~4.0.1',
          'mongoose':      '~4.13.4',
          'morgan':        '~1.9.0',
          'serve-favicon': '~2.4.5',
          'dotenv':        '~4.0.0'
      }
    }

    // CSS Engine support
    switch (program.css) {
      case 'less':    pkg.dependencies['less-middleware']      = '~2.2.1'; break;
      case 'compass': pkg.dependencies['node-compass']         = '0.2.4';  break;
      case 'sass':    pkg.dependencies['node-sass-middleware'] = '0.11.0'; break;
      default:        pkg.dependencies['node-compass']         = '0.2.4';
    }

    // sort dependencies like npm(1)
    pkg.dependencies = sortedObject(pkg.dependencies);

    write(`${path}/package.json`, JSON.stringify(pkg, null, 2) + '\n');
    write(`${path}/app.js`,       loadTemplate('js/app.js'));
    write(`${path}/.env`,         loadTemplate('.env'));
    write(`${path}/.gitignore`,   fs.readFileSync(__dirname + '/../templates/js/gitignore', 'utf-8'));

    complete();
  });
}

function copy_template(from, to) {
  from = path.join(__dirname, '..', 'templates', from);
  write(to, fs.readFileSync(from, 'utf-8'));
}

// Create an app name from a directory path, fitting npm naming requirements.
function createAppName(pathName) {
  return path.basename(pathName)
    .replace(/[^A-Za-z0-9\.()!~*'-]+/g, '-')
    .replace(/^[-_\.]+|-+$/g, '')
    .toLowerCase()
}

// Check if the given directory `path` is empty.
function emptyDirectory(path, fn) {
  fs.readdir(path, function(err, files){
    if (err && 'ENOENT' != err.code) throw err;
    fn(!files || !files.length);
  });
}

// Graceful exit for async STDIO
function exit(code) {
  function done() { if (!(draining--)) _exit(code); }

  var draining = 0;
  var streams = [process.stdout, process.stderr];

  exit.exited = true;

  streams.forEach(function(stream){
    // submit empty write request and wait for completion
    draining += 1;
    stream.write('', done);
  });

  done();
}

function loadTemplate(name) {
  return fs.readFileSync(path.join(__dirname, '..', 'templates', name), 'utf-8');
}

function main() {
  var destinationPath = program.args.shift() || '.';
  var appName = createAppName(path.resolve(destinationPath)) || 'hello-world'

  // View engine
  program.view = 'hbs'

  // Generate application
  emptyDirectory(destinationPath, function (empty) {
    if (empty || program.force) {
      createApplication(appName, destinationPath);
    } else {
      confirm('destination is not empty, continue? [y/N] ', function (ok) {
        if (ok) {
          process.stdin.destroy();
          createApplication(appName, destinationPath);
        } else {
          console.error('aborting');
          exit(1);
        }
      });
    }
  });
}

// Generate a callback function for commander to warn about renamed option.
function renamedOption(originalName, newName) {
  return function (val) {
    warning(util.format("option `%s' has been renamed to `%s'", originalName, newName))
    return val
  }
}

// Display a warning similar to how errors are displayed by commander.
function warning(message) {
  console.error()
  message.split('\n').forEach(function (line) {
    console.error('  warning: %s', line)
  })
  console.error()
}

function write(path, str, mode) {
  fs.writeFileSync(path, str, { mode: mode || 0666 });
  console.log('   \x1b[36mcreate\x1b[0m : ' + path);
}

function mkdir(path, fn) {
  mkdirp(path, 0755, function(err){
    if (err) throw err;
    console.log('   \033[36mcreate\033[0m : ' + path);
    fn && fn();
  });
}
