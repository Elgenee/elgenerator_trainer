var app = require('../app');

app.use(catch_404);    // catch 404 and forward to error handler
app.use(errorHandler); // Express middleware to handle errors

let server = http.createServer(app);

server.on('error', onError);
server.listen(process.env.PORT, () => {
  console.log(`Listening on ${server.address()}`);
});

// ------------------------------------------------------------------------
// ERROR HANDLERS
// ------------------------------------------------------------------------

// Express middleware to catch 404 - unkonwn routes
const catch_404 = (req, res, next) => {
  const err = new Error('Not Found');
  err.status = 404;
  next(err);
};

// Express middleware to handle errors
const errorHandler = (err, req, res, next) => {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = process.env.ENV === 'development' ? err : {};

  // render the error page
  res.status(err.status || 500);
  res.render('error');
};

// Event listener for HTTP server errors
const onError = error => {
  if (error.syscall !== 'listen') { throw error }

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(`Port ${process.env.PORT} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(`Port ${process.env.PORT}is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}
